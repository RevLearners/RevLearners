package io.revlearners.model.services;

import java.util.HashSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import io.revlearners.model.bean.Rank;
import io.revlearners.model.bean.User;
import io.revlearners.model.bean.UserRank;
import io.revlearners.model.bean.UserRole;
import io.revlearners.model.bean.UserStatus;
import io.revlearners.model.bo.UserBo;
import io.revlearners.model.dao.interfaces.IUserRepository;
import io.revlearners.model.dao.interfaces.IUserRoleRepository;
import io.revlearners.model.dao.interfaces.IUserStatusRepository;
import io.revlearners.model.services.interfaces.IUserService;
import io.revlearners.util.commons.configs.Constants;
import io.revlearners.util.commons.security.JwtUserFactory;

@Service
@Transactional
public class UserService extends CrudService<User> implements UserDetailsService, IUserService {

    @Autowired
    EmailService emailService;

	@Autowired
	private IUserRepository repository;

	@Autowired
	private IUserStatusRepository statRepo;

	@Autowired
	private IUserRoleRepository roleRepo;

	@Autowired
	PasswordEncoder encoder;

	private static final String USER_NOT_FOUND = "Invalid username";

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User userDao = repository.findByUsername(username);
		UserBo user = modelMapper.map(userDao, UserBo.class);
		if (user == null)
			throw new UsernameNotFoundException(USER_NOT_FOUND);
		return JwtUserFactory.create(user);
	}

	public UserBo register(UserBo user) {
		String pass;
		UserStatus stat = statRepo.findOne(Constants.STATUS_PENDING);
		UserRole role = roleRepo.findOne(user.getRoleId());
		pass = encoder.encode(user.getPassword());

<<<<<<< HEAD
		User userDao = new User(user.getFirstName(), user.getMiddleName(), user.getLastName(), stat, role,
				user.getEmail(), user.getUsername(), pass, Constants.START_DATE);
		userDao.setRanks(new HashSet<>());
=======
		User userEntity = new User(user.getFirstName(), user.getMiddleName(), user.getLastName(), stat, role,
				user.getEmail(), user.getUsername(), pass);
		userEntity.setRanks(new HashSet<>());
>>>>>>> 491465ed850694b16627618e078427bb1944412d
		for(Rank r : Constants.getBeginnerRanks()) {
			userEntity.getRanks().add(new UserRank(userEntity, r, 0L));
		}
		repository.saveAndFlush(userEntity);
		emailService.sendVerificationEmail(userEntity.getEmail(), userEntity.getId());

		return modelMapper.map(userEntity, UserBo.class);
	}
}
